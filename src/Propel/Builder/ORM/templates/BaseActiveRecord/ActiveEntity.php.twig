{% block ActiveEntity %}
    /**
     * Returns if the entity is new.
     *
     * @return bool If the entity is new.
     */
    public function isNew()
    {
        return !static::getEntityManager()->getUnitOfWork()->isInIdentityMap($this);
    }

    /**
     * Returns if the entity is modified.
     *
     * @return bool If the entity is modified.
     */
    public function isModified()
    {
        return (bool) count($this->getModified());
    }

    /**
     * Returns the entity modifications
     *
     * @return array The entity modifications.
     */
    public function getModified()
    {
        if ($this->isNew()) {
            return array();
        }

        $originalData = static::getEntityManager()->getUnitOfWork()->getOriginalEntityData($this);

        return array_diff($originalData, $this->toArray());
    }

    /**
     * Refresh the entity from the database.
     *
     * @return void
     */
    public function reload()
    {
        static::getEntityManager()->getUnitOfWork()->refresh($this);
    }

    /**
     * Returns the change set of the entity.
     *
     * @return array The change set.
     */
    public function getChangeSet()
    {
        return static::getEntityManager()->getUnitOfWork()->getEntityChangeSet($this);
    }

    /**
     * Perform custom actions before persisting a new object.
     * Returning a non-true value will cancel persisting the object.
     * 
     * @return bool
     */
    public function preInsert()
    {
        return true;
    }

    /**
     * Perform custom actions before persisting an existing.
     * Returning a non-true value will cancel persisting the object.
     * 
     * @return bool
     */
    public function preUpdate()
    {
        return true;
    }

    /**
     * Perform custom actions before persisting any object.
     * Returning a non-true value will cancel persisting the object.
     * 
     * @return bool
     */
    public function preSave()
    {
        return true;
    }

    /**
     * Persist the current object and flush the entity manager
     */
    public function save()
    {
        return $this->doSave(true);
    }

    /**
     * Persist the current object without flushing the entity manager
     */
    public function persist()
    {
        return $this->doSave(false);
    }

    /**
     * Perform a save task, with our without flushing the entity manager.
     */
    protected function doSave($flush = true)
    {
        if ($this->isNew()) {
            $isInsert = true;
            $ret = $this->preInsert();
        } else {
            $isInsert = false;
            $ret = $this->preUpdate();
        }

        if ($ret && $this->preSave())
        {
            $em = self::getEntityManager();
            $em->persist($this);
            
            if ($flush) {
                $em->flush();
            }
            
            if ($isInsert) {
                $this->postInsert();
            } else {
                $this->postUpdate();
            }
            $this->postSave();
        }
    }

    /**
     * Perform custom actions after persisting a new object.
     */
    public function postInsert()
    {
    }

    /**
     * Perform custom actions after persisting an existing object.
     */
    public function postUpdate()
    {
    }

    /**
     * Perform custom actions after persisting any object.
     */
    public function postSave()
    {
    }

    /**
     * Remove the current object and flush the entity manager
     */
    public function delete()
    {
        $em = self::getEntityManager();
        $em->remove($this);
        $em->flush();
    }

    static public function getEntityManager()
    {
        return \Propel\EntityManagerContainer::getEntityManager();
    }

{% endblock %}