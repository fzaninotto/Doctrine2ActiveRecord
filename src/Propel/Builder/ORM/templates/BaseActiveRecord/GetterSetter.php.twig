{% block GetterSetter %}
{% block FieldMappingGetterSetter %}
{% for fieldMapping in metadata.fieldMappings %}
    /**
     * Get the {{ fieldMapping.fieldName }}
     * 
     * @return {{ fieldMapping.type|typeToPhp }}
     */
    public function get{{ fieldMapping.fieldName|classify }}()
    {
        return $this->{{ fieldMapping.fieldName }};
    }

    /**
     * Set the {{ fieldMapping.fieldName }}
     * 
     * @param {{ fieldMapping.type|typeToPhp }} ${{ fieldMapping.fieldName }}
     */
    public function set{{ fieldMapping.fieldName|classify }}(${{ fieldMapping.fieldName }})
    {
        $this->{{ fieldMapping.fieldName }} = ${{ fieldMapping.fieldName }};
    }

{% endfor %}
{% endblock %}
{% block AssociationMappingGetterSetter %}
{% for key, associationMapping in metadata.associationMappings %}
{% set associationDetail = associationDetails[key] %}
    /**
     * Get the {% if not associationDetail.isToOne %}collection of {% endif %}related {{ associationMapping.fieldName }}
     * 
     * @return {{ associationDetail.targetEntity }}
     */
    public function get{{ associationMapping.fieldName|classify }}()
    {
        return $this->{{ associationMapping.fieldName }};
    }

    /**
     * Set the {% if not associationDetail.isToOne %}collection of {% endif %}related {{ associationMapping.fieldName }}
     * 
     * @param {{ associationDetail.targetEntity }} ${{ associationMapping.fieldName }}
     */
    public function set{{ associationMapping.fieldName|classify }}(${{ associationMapping.fieldName }})
    {
        $this->{{ associationMapping.fieldName }} = ${{ associationMapping.fieldName }};
    }

{% if not associationDetail.isToOne %}
{% set singularFieldName = associationMapping.fieldName|singularize %}
    /**
     * Add a {{ singularFieldName }} to the collection of related {{ associationMapping.fieldName }}
     * 
     * @param \{{ associationMapping.targetEntity }} ${{ singularFieldName }}
     */
    public function add{{ singularFieldName|classify }}(${{ singularFieldName }})
    {
        $this->{{ associationMapping.fieldName }}->add(${{ singularFieldName }});
    }

    /**
     * Remove a {{ singularFieldName }} from the collection of related {{ associationMapping.fieldName }}
     * 
     * @param \{{ associationMapping.targetEntity }} ${{ singularFieldName }}
     */
    public function remove{{ singularFieldName|classify }}(${{ singularFieldName }})
    {
        $this->{{ associationMapping.fieldName }}->removeElement(${{ singularFieldName }});
    }

{% endif %}
{% endfor %}
{% endblock %}
{% endblock %}
