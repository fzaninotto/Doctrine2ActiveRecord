{% block GenericGetterSetter %}
    /**
     * Set a property of the entity by name passed in as a string
     * 
     * @param string $name
     * @param mixed  $value
     * 
     * @throws \InvalidArgumentException If the property does not exists
     */
    public function setByName($name, $value)
    {
        switch ($name) {
{%      for fieldMapping in metadata.fieldMappings %}
            case '{{ fieldMapping.fieldName }}':
                $this->set{{ fieldMapping.fieldName|classify }}($value);
                break;

{%      endfor %}
            default:
                throw new \InvalidArgumentException(sprintf('Generic setter for "%s" is not defined', $name));
        }
    }

    /**
     * Get a property from the entity by name passed in as a string
     * 
     * @param string $name
     * 
     * @return mixed
     * 
     * @throws \InvalidArgumentException If the property does not exists
     */
    public function getByName($name)
    {
        switch ($name) {
{%      for fieldMapping in metadata.fieldMappings %}
            case '{{ fieldMapping.fieldName }}':
                return $this->get{{ fieldMapping.fieldName|classify }}($value);

{%      endfor %}
            default:
                throw new \InvalidArgumentException(sprintf('Generic getter for "%s" is not defined', $name));
        }
    }

{% endblock %}